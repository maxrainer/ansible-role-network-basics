---
# juniper added
# pushes L3 interface config 
# facts schema
# l3_interfaces:
# -   ipv4:
#     -   address: 10.255.255.1 255.255.255.255
#     name: loopback0
# [ {'name': 'loopback0', 'ipv4': [ { address: }]}]
#  "ansible_network_resources": {
#             "l3_interfaces": [
#                 {
#                     "ipv4": [
#                         {
#                             "address": "172.16.1.151 255.255.255.0"
#                         }
#                     ],
#                     "name": "Ethernet0/0"
#                 },
#                 {
#                     "ipv4": [
#                         {
#                             "address": "7.7.7.1 255.255.255.0",
#                             "secondary": true
#                         },
#                         {
#                             "address": "10.100.0.1 255.255.255.0"
#                         }
#                     ],
#                     "name": "Ethernet0/1"
#                 },
# - name: get network resources
#   cisco.ios.ios_facts:
#     gather_network_resources:
#       - l3_interfaces
#   tags: [always]

- name: NETBOX BLOCK
  block:
  - name: GET device ID if empty
    uri: 
      url: "{{ net_netbox_url }}/api/dcim/devices/?name={{ inventory_hostname }}"
      method: GET
      validate_certs: no
      headers:
        content-type: 'aplication/json'
        Authorization: "Token {{ net_netbox_token }}"
      body_format: json
    register: _dcim_device
    when: device_id == '' or device_id == 0
  - set_fact:
      device_id: "{{ _dcim_device.json.results[0].id }}"
    when: device_id == '' or device_id == 0 and _dcim_device.json.results is defined and _dcim_device.json.results | length > 0
  - name: GET netbox IPAM information
    uri:
      url: "{{ net_netbox_url }}/api/ipam/ip-addresses/?device_id={{ device_id }}"
      method: GET
      validate_certs: no
      headers:
        content-type: 'aplication/json'
        Authorization: "Token {{ net_netbox_token }}"
      body_format: json
    register: _ipam_info
  - set_fact:
      net_l3_intfs: "{{ net_l3_intfs + [{'name': item.assigned_object.name, 'ipv4':[{'address':item.address}]} ] }}"
    loop: "{{ _ipam_info.json.results }}"
    loop_control:
      label: "{{ item.assigned_object.name }} ==> {{ item.address }}"
  - debug:
      var: net_l3_intfs
      verbosity: 2
  tags: [netbox]
    
- name: Cisco IOS L3 network interfaces - replaced
  cisco.ios.ios_l3_interfaces:
    config: "{{ net_l3_intfs }}"
    state: replaced
  when: ansible_network_os == 'ios' and net_intf_filter == ""
  become: true
  tags: [push_intf_l3]

- name: Cisco IOS L3 network interfaces - merged
  cisco.ios.ios_l3_interfaces:
    config: "{{ net_l3_intfs }}"
    state: merged
  when: ansible_network_os == 'ios' and net_intf_filter != ""
  become: true
  tags: [push_intf_l3]

- name: Arista EOS L3 network interfaces - replaced
  arista.eos.eos_l3_interfaces:
    config: "{{ net_l3_intfs }}"
    state: replaced
  when: ansible_network_os == 'eos' and net_intf_filter == ""
  become: true
  tags: [push_intf_l3]

- name: Arista EOS L3 network interfaces - merged
  arista.eos.eos_l3_interfaces:
    config: "{{ net_l3_intfs }}"
    state: merged
  when: ansible_network_os == 'eos' and net_intf_filter != ""
  become: true
  tags: [push_intf_l3]

- name: Juniper JunOS L3 network interfaces - replaced
  junipernetworks.junos.junos_l3_interfaces:
    config: "{{ net_l3_intfs }}"
    state: replaced
  when: ansible_network_os == 'junipernetworks.junos.junos' and net_intf_filter == ""
  become: true
  tags: [push_intf_l3]

- name: Juniper JunOS L3 network interfaces - merged
  junipernetworks.junos.junos_l3_interfaces:
    config: "{{ net_l3_intfs }}"
    state: merged
  when: ansible_network_os == 'junipernetworks.junos.junos' and net_intf_filter != ""
  become: true
  tags: [push_intf_l3]
